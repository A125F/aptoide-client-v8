/*
 * Copyright (c) 2016.
 * Modified by SithEngineer on 24/06/2016.
 */

apply plugin: 'com.android.application'
apply plugin: 'android-command'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'realm-android'

retrolambda {
    jvmArgs '-noverify'
}

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        targetSdkVersion 23
        versionCode 1
        versionName "8.0.0"
    }

    signingConfigs { release }

    productFlavors {
        // Define separate dev and prod product flavors.
        dev {
            applicationId "cm.aptoide.pt.aptoideclientv8"
            versionCode 57
            versionName "8.0.0.24062016"
            resValue "string", "authenticatorAccountType", applicationId
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion 21
        }
        prod {
            applicationId "cm.aptoide.pt"
            resValue "string", "authenticatorAccountType", applicationId
            minSdkVersion 15
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    project.ext { appName = 'aptoide' }
                    def newName = output.outputFile.name
                    newName = newName.replace("vanilla-", "$project.ext.appName-") //"MyAppName" -> I set my app variables in the root project
                    newName = newName.replace("prod-release", versionName)
                    newName = newName.replace("release", versionName)
                    //noinspection GroovyAssignabilityCheck
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }
        }

        debug {
            multiDexEnabled true
            shrinkResources false
            zipAlignEnabled false
            minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'META-INF/services/javax.annotation.processing.Processor'
        pickFirst 'META-INF/DEPENDENCIES.txt'
        pickFirst 'META-INF/DEPENDENCIES'
        pickFirst 'META-INF/LICENSE.txt'
        pickFirst 'META-INF/LICENSE'
        pickFirst 'META-INF/NOTICE.txt'
        pickFirst 'META-INF/NOTICE'
        pickFirst 'META-INF/MANIFEST.MF'
        pickFirst 'META-INF/LGPL2.1'
    }
}

dependencies {

    //
    // inter-projects dependencies
    //

    debugCompile project(path: ':v8engine', configuration: 'debug')
    releaseCompile project(path: ':v8engine', configuration: 'release')

    //
    // custom libs in folders
    //

    compile fileTree(dir: 'libs', include: ['*.jar'])

    //
    // from remote repos
    //

    testCompile "junit:junit:${JUNIT_VERSION}"
    compile "com.android.support:appcompat-v7:${SUPPORT_LIB_VERSION}"
}

def File propFile = new File('signing.properties')
if (propFile.canRead()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        println 'all good to go'
    } else {
        android.buildTypes.release.signingConfig = null
        println 'signing.properties found but some entries are missing'
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}





























