buildscript {

  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    classpath 'io.fabric.tools:gradle:1.22.0'
  }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'android-command'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.getkeepsafe.dexcount'

retrolambda {
  jvmArgs '-noverify'
  //defaultMethods true
}


android {

  compileSdkVersion COMPILE_SDK_VERSION
  buildToolsVersion BUILD_TOOLS_VERSION

  // keep the "applicationId" var in third place for the jenkins build script hack
  defaultConfig {
    versionName "8.0.0"
    versionCode 1
    applicationId "${APPLICATION_ID}"
    minSdkVersion 15
    targetSdkVersion TARGET_SDK_VERSION
    // common proguard files to append and configure proguard for the whole project
    //        proguardFile 'proguard_files/proguard-android-gif-drawable.pro'
    //        proguardFile 'proguard_files/proguard-androidannotations.pro'
    //        proguardFile 'proguard_files/proguard-support-v7-appcompat.pro'
    //        proguardFile 'proguard_files/proguard-support-v7-cardview.pro'
    //        //proguardFile 'proguard_files/proguard-google-analytics.pro'
    //        //proguardFile 'proguard_files/proguard-google-admob.pro'
    //        proguardFile 'proguard_files/proguard-sqlite.pro'
    //        proguardFile 'proguard_files/proguard-glide.pro'
    //        proguardFile 'proguard_files/proguard-retrolambda.pro'
    //        proguardFile 'proguard_files/proguard-rx-java.pro'
    //        proguardFile 'proguard_files/proguard-rxjava-promises.pro'
    //        proguardFile 'proguard_files/proguard-jackson-2.pro'
    //        proguardFile 'proguard_files/proguard-realm.pro'
    //        proguardFile 'proguard_files/proguard-square-okhttp3.pro'
    //        proguardFile 'proguard_files/proguard-square-retrofit2.pro'
    //        proguardFile 'proguard_files/proguard-crashlytics-2.pro'
    //        proguardFile 'proguard_files/proguard-fabric-twitter-kit.pro'
    //        proguardFile 'proguard_files/proguard-facebook.pro'
    //        proguardFile 'proguard_files/proguard-facebook-stetho.pro'
    //        proguardFile 'proguard_files/proguard-square-okio.pro'
    proguardFile 'proguard-rules.pro'
    proguardFile getDefaultProguardFile('proguard-android.txt')
    testProguardFile 'proguard-test-rules.pro'
    manifestPlaceholders = [toolboxProviderAuthority   : "cm.aptoide.pt.StubProvider",
                            suggestionProviderAuthority: "cm.aptoide.pt.v8engine.provider.SuggestionProvider",
                            currentApplicationId       : "cm.aptoide.pt",
                            fabricApiKey               : project.FABRIC_API_KEY]

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    //testInstrumentationRunner "cm.aptoide.pt.MultidexAndroidJunitRunner"

    // Enabling multidex support.
    multiDexEnabled true
  }

  lintOptions {
    abortOnError false
  }

  signingConfigs {
    release {
      storeFile = file(project.STORE_FILE)
      storePassword = project.STORE_PASSWORD
      keyAlias = project.KEY_ALIAS
      keyPassword = project.KEY_PASSWORD
      v2SigningEnabled = false
    }
  }

  productFlavors {

    internal {
      minSdkVersion 21

      // applicationIdSuffix does not work properly, as the application ID gets changed after the buildFlavor
      applicationIdSuffix ".internal"

      versionName "8.0.2." + getDate()
      versionCode project.INTERNAL_VERSION_CODE.toInteger()

      resValue "string", "authenticatorAccountType", APPLICATION_ID + ".internal"

      manifestPlaceholders = [toolboxProviderAuthority   : "cm.aptoide.pt.StubProvider.internal",
                              suggestionProviderAuthority: "cm.aptoide.pt.v8engine.provider.SuggestionProvider.internal",
                              currentApplicationId       : "cm.aptoide.pt.internal"]
    }

    dev {
      // applicationIdSuffix does not work properly, as the application ID gets changed after the buildFlavor
      applicationIdSuffix ".dev"

      versionName "8.0.2." + getDate()
      versionCode project.DEV_VERSION_CODE.toInteger()

      resValue "string", "authenticatorAccountType", APPLICATION_ID + ".dev"

      manifestPlaceholders = [toolboxProviderAuthority   : "cm.aptoide.pt.StubProvider.dev",
                              suggestionProviderAuthority: "cm.aptoide.pt.v8engine.provider.SuggestionProvider.dev",
                              currentApplicationId       : "cm.aptoide.pt.dev"]
    }

    prod {
      versionCode project.PROD_VERSION_CODE.toInteger()
      versionName "8.0.2.1"
      resValue "string", "authenticatorAccountType", APPLICATION_ID
    }
  }

  buildTypes {
    release {
      manifestPlaceholders = [LOCALYTICS_APP_KEY: project.LOCALYTICS_RELEASE_KEY]
      zipAlignEnabled true
      minifyEnabled true
      shrinkResources true
      signingConfig signingConfigs.release
    }

    debug {
      manifestPlaceholders = [LOCALYTICS_APP_KEY: project.LOCALYTICS_DEBUG_KEY]
      ext.enableCrashlytics = false
      multiDexEnabled true
      zipAlignEnabled false
      minifyEnabled false
      shrinkResources false
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    pickFirst 'META-INF/services/javax.annotation.processing.Processor'
    pickFirst 'META-INF/DEPENDENCIES.txt'
    pickFirst 'META-INF/DEPENDENCIES'
    pickFirst 'META-INF/LICENSE.txt'
    pickFirst 'META-INF/LICENSE'
    pickFirst 'META-INF/NOTICE.txt'
    pickFirst 'META-INF/NOTICE'
    pickFirst 'META-INF/MANIFEST.MF'
    pickFirst 'META-INF/LGPL2.1'
  }

  applicationVariants.all { variant ->
    if (variant.buildType.name == buildTypes.release.name) {

      variant.outputs.each { output ->
        project.ext { appName = 'aptoide' }
        def newName = output.outputFile.name
        newName = newName.replace("vanilla-", "$project.ext.appName-")
        //"MyAppName" -> I set my app variables in the root project
        newName = newName.replace("prod-release", versionName)
        newName = newName.replace("release", versionName)
        //noinspection GroovyAssignabilityCheck
        output.outputFile = new File(output.outputFile.parent, newName)
      }
    }
  }

  dexOptions {
    javaMaxHeapSize "2g"
  }
}

dependencies {

  devCompile project(path: ':v8engine', configuration: 'prodRelease')
  prodCompile project(path: ':v8engine', configuration: 'prodRelease')
  internalCompile project(path: ':v8engine', configuration: 'internalDebug')

  // Testing-only dependencies
  testCompile "junit:junit:${JUNIT_VERSION}"
  testCompile "org.robolectric:robolectric:${ROBOELECTRIC_VERSION}"
  testCompile "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
  // Force usage of support annotations in the test app, since it is internally used by the runner module.
  androidTestCompile("com.android.support.test:runner:${RUNNER_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }
  androidTestCompile "com.android.support.test:rules:${RULES_VERSION}"
  androidTestCompile("com.android.support:multidex-instrumentation:${MULTIDEX_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }
  androidTestCompile "com.android.support:support-annotations:${SUPPORT_ANNOTATIONS_LIB_VERSION}"

  compile("com.android.support:multidex:${MULTIDEX_VERSION}") {
    exclude group: "com.android.support", module: "support-annotations"
  }
}

String getDate() {
  def date = new Date()
  def formattedDate = date.format('yyyyMMdd')
  return formattedDate
}